openapi: 3.0.2
info:
  title: Photonic
  version: "1.0"
  description: Store and manage your photos in your private cloud.
  contact:
    name: Max Vissing
    email: max_vissing@yahoo.de
servers:
  - url: "http://localhost:8080/api/v1"
    description: Develop
  - url: "https://photonic.vissing.ddnss.de"
    description: Production
tags:
  - name: Album
  - name: Media
  - name: System
paths:
  /media:
    get:
      summary: Get media
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Medium"
        "204":
          description: No Content
        "400":
          description: startDate after endDate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      operationId: findAllMedia
      description: |-
        Gets all media.
        Can be filtered by date.
      security:
        - Authentik: [ ]
      parameters:
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
        - $ref: "#/components/parameters/page_last_date"
        - $ref: "#/components/parameters/page_last_id"
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/album_id"
        - $ref: "#/components/parameters/direction"
        - schema:
            type: boolean
            default: true
          in: query
          name: include_no_album
      tags:
        - Media
    post:
      summary: Create medium
      operationId: createMedium
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectId'
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: |-
            Not Found
            Could not find album_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: |-
            Conflict
            The image with the filename already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - Authentik: [ ]
      requestBody:
        content:
          image:
            schema:
              type: string
              format: binary
        description: ""
      tags:
        - Media
      description: Creates a new medium.
      parameters:
        - schema:
            type: string
          in: query
          name: filename
        - schema:
            type: string
          in: query
          name: extension
        - $ref: "#/components/parameters/album_id"
        - schema:
            type: array
            items:
              type: string
          in: query
          name: tags
        - schema:
            type: integer
            default: 10
          in: query
          name: priority
        - schema:
            type: string
            format: date-time
          in: query
          name: dateTaken
          description: Overrides the date the medium item was taken from meta information
    parameters: [ ]
  "/media/{id}":
    get:
      summary: Get medium
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Medium"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: getMedium
      description: Gets a specific medium by its id.
      security:
        - Authentik: [ ]
      parameters: [ ]
      tags:
        - Media
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
    delete:
      summary: Deletes medium
      operationId: deleteMedium
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      description: Moves the medium to trash.
      parameters: [ ]
      tags:
        - Media
  "/media/{id}/{format}/{item_id}/raw":
    get:
      summary: Gets file
      responses:
        "200":
          description: OK
          content:
            image:
              schema:
                type: string
                format: binary
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: getRaw
      description: Gets the raw medium by its id. The content-type indicates the format of the medium.
      security:
        - Authentik: [ ]
      parameters: [ ]
      tags:
        - Media
    delete:
      summary: Deletes item
      operationId: deleteItem
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      parameters:
        - schema:
            type: boolean
          in: query
          name: delete
          description: Fully deletes it instead of moving to trash
      tags:
        - Media
      description: Moves the item to trash. The medium will be automatically delete if it was the last original
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      - in: path
        name: format
        required: true
        schema:
          type: string
          enum:
            - originals
            - edits
            - previews
            - sidecars
      - name: item_id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
  "/media/{id}/{format}/raw":
    post:
      summary: Adds file
      operationId: addFile
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediumItem"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - Authentik: [ ]
      requestBody:
        content:
          image:
            schema:
              type: string
              format: binary
      tags:
        - Media
      description: Adds a new type to an existing medium.
      parameters:
        - schema:
            type: string
          in: query
          name: filename
        - schema:
            type: string
          in: query
          name: extension
        - schema:
            type: integer
            default: 10
          in: query
          name: priority
        - schema:
            type: string
            format: date-time
          in: query
          name: dateTaken
          description: Overrides the date the medium item was taken from meta information
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      - in: path
        name: format
        required: true
        schema:
          type: string
          enum:
            - originals
            - edits
            - previews
  "/media/{id}/sidecars/{sidecar_id}/raw":
    post:
      summary: Add medium
      operationId: addSidecar
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MediumItem"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - Authentik: [ ]
      requestBody:
        content:
          image:
            schema:
              type: string
              format: binary
      tags:
        - Media
      description: Adds a new type to an existing medium.
      parameters:
        - schema:
            type: boolean
          in: query
          name: original
          description: "If true, stores the medium in /Originals. Needs a filename"
        - schema:
            type: string
          in: query
          name: filename
        - schema:
            type: integer
          in: query
          name: priority
    delete:
      summary: Deletes the type
      operationId: deleteSidecar
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      parameters: [ ]
      tags:
        - Media
      description: "Deletes the sidecar of the medium. If this is the original, it can only be removed if all other types have been removed."
    parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/ObjectId"
      - schema:
          type: string
        name: sidecar_id
        in: path
        required: true
  /albums:
    get:
      summary: Get albums
      tags:
        - Album
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Album"
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties: { }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: getAlbums
      parameters:
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      security:
        - Authentik: [ ]
      description: Returns all albums
    post:
      summary: Create new album
      operationId: createAlbum
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: |-
            Not Found
            Could not find ObjectId
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: |-
            Conflict
            Name must be unique
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      security:
        - Authentik: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                media:
                  type: array
                  items:
                    $ref: "#/components/schemas/ObjectId"
                titleMedium:
                  $ref: "#/components/schemas/ObjectId"
              required:
                - name
      tags:
        - Album
      description: Creates a new album
  "/albums/{id}":
    get:
      summary: Get album
      tags:
        - Album
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: getAlbum
      parameters:
        - $ref: "#/components/parameters/per_page"
        - $ref: "#/components/parameters/start_date"
        - $ref: "#/components/parameters/end_date"
      security:
        - Authentik: [ ]
      description: Returns all albums
    parameters:
      - schema:
          $ref: "#/components/schemas/ObjectId"
        name: id
        in: path
        required: true
    patch:
      summary: ""
      operationId: updateAlbum
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: |-
            Conflict
            Name must be unique
        "500":
          $ref: "#/components/responses/InternalServerError"
      tags:
        - Album
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                add:
                  type: array
                  items:
                    $ref: "#/components/schemas/ObjectId"
                remove:
                  type: array
                  items:
                    $ref: "#/components/schemas/ObjectId"
                name:
                  type: string
                description:
                  type: string
      description: "Adds, removes or renames an album."
    delete:
      summary: Delete Album
      operationId: deleteAlbum
      responses:
        "200":
          description: OK
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/InternalServerError"
      tags:
        - Album
      description: Deletes an album. Resets album property on all images.
  /ping:
    get:
      summary: Ping
      tags:
        - System
      responses:
        "204":
          description: OK
        "500":
          $ref: "#/components/responses/InternalServerError"
      operationId: ping
      description: Pings the http_server
  /info:
    get:
      summary: Info
      tags:
        - System
      responses:
        "200":
          description: The info about the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Info"
components:
  schemas:
    Medium:
      title: Medium
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        type:
          $ref: "#/components/schemas/MediumType"
        album:
          $ref: "#/components/schemas/ObjectId"
        tags:
          type: array
          items:
            type: string
        originals:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/MediumItem"
        preview:
          $ref: "#/components/schemas/MediumItem"
        edits:
          type: array
          items:
            $ref: "#/components/schemas/MediumItem"
        sidecars:
          type: array
          items:
            $ref: "#/components/schemas/Sidecar"
      required:
        - id
        - type
        - originals
    MediumItem:
      title: MediumItem
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        type:
          type: string
          description: MIME content-type
        filename:
          type: string
        dateTaken:
          type: string
          format: date-time
        width:
          type: integer
        height:
          type: integer
        filesize:
          type: integer
          description: size in bytes
        priority:
          type: integer
          default: 10
      required:
        - id
        - type
        - filename
        - dateTaken
        - width
        - height
        - filesize
        - priority
    Album:
      title: Album
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ObjectId"
        name:
          type: string
        description:
          type: string
        firstDate:
          type: string
          format: date-time
        lastDate:
          type: string
          format: date-time
        titleMedium:
          $ref: "#/components/schemas/ObjectId"
        media:
          type: array
          items:
            $ref: "#/components/schemas/ObjectId"
      required:
        - id
        - name
    Error:
      title: Error
      type: object
      properties:
        message:
          type: string
        type:
          type: string
        param:
          type: string
      required:
        - code
        - message
        - type
    Info:
      title: Info
      type: object
      properties:
        clientId:
          type: string
          description: The OAuth2 cliend id
        authorizeUrl:
          type: string
          description: The OAuth2 authorize url
        tokenUrl:
          type: string
          description: The OAuth2 token url
    PaginatedResult:
      title: PaginatedResult
      type: object
      properties:
        next:
          type: string
        results:
          type: array
          items: { }
      required:
        - page
        - per_page
        - results
    ObjectId:
      title: ObjectId
      type: string
      format: uuid
    MediumType:
      type: string
      enum:
        - photo
        - video
        - live-photo
        - vector
        - sequence
        - gif
        - other
    Sidecar:
      title: Sidecar
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          description: The MIME type
        filename:
          type: string
        filesize:
          type: integer
          description: size in bytes
        priority:
          type: integer
          default: 10
      required:
        - id
        - type
        - filename
        - filesize
        - priority
    TrashItem:
      title: TrashItem
      type: object
      properties:
        expires:
          type: string
          format: date-time
        medium:
          $ref: "#/components/schemas/Medium"
        mediumItem:
          $ref: "#/components/schemas/MediumItem"
        sidecar:
          $ref: "#/components/schemas/Sidecar"
        mediumId:
          $ref: "#/components/schemas/ObjectId"
        type:
          type: string
          enum:
            - medium
            - original
            - preview
            - edit
            - sidecar
      required:
        - expires
        - type
  securitySchemes:
    Authentik:
      type: openIdConnect
      openIdConnectUrl: "https://auth.vissing.ddnss.de/application/o/photonic"
      description: Authentik endpoint
  parameters:
    start_date:
      name: start_date
      in: query
      required: false
      schema:
        type: string
        format: date-time
      description: Show media after date
    end_date:
      name: end_date
      in: query
      schema:
        type: string
        format: date-time
      description: Show media before date
    page_last_date:
      name: page_last_date
      in: query
      schema:
        type: string
        format: date-time
      description: Used for pagination
    page_last_id:
      name: page_last_id
      in: query
      schema:
        type: string
      description: Used for pagination
    per_page:
      name: per_page
      in: query
      required: false
      schema:
        type: string
    album_id:
      name: album_id
      in: query
      required: false
      schema:
        type: string
    direction:
      name: direction
      in: query
      required: false
      schema:
        type: string
        description: ASC = ascending = oldest first, DESC = descending = newest first
        default: DESC
        enum:
          - ASC
          - DESC
  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
